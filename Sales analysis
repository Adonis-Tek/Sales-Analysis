{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "sales = pd.read_excel(r'C:\\Users\\Patrick Adonis\\Documents\\Data playground\\sampledatafoodsales.xlsx' )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>City</th>\n",
       "      <th>Category</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>TotalPrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>33</td>\n",
       "      <td>1.77</td>\n",
       "      <td>58.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Crackers</td>\n",
       "      <td>Whole Wheat</td>\n",
       "      <td>87</td>\n",
       "      <td>3.49</td>\n",
       "      <td>303.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>58</td>\n",
       "      <td>1.87</td>\n",
       "      <td>108.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-10</td>\n",
       "      <td>East</td>\n",
       "      <td>New York</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>82</td>\n",
       "      <td>1.87</td>\n",
       "      <td>153.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Arrowroot</td>\n",
       "      <td>38</td>\n",
       "      <td>2.18</td>\n",
       "      <td>82.84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate Region         City  Category         Product  Quantity  \\\n",
       "0 2020-01-01   East       Boston      Bars          Carrot        33   \n",
       "1 2020-01-04   East       Boston  Crackers     Whole Wheat        87   \n",
       "2 2020-01-07   West  Los Angeles   Cookies  Chocolate Chip        58   \n",
       "3 2020-01-10   East     New York   Cookies  Chocolate Chip        82   \n",
       "4 2020-01-13   East       Boston   Cookies       Arrowroot        38   \n",
       "\n",
       "   UnitPrice  TotalPrice  \n",
       "0       1.77       58.41  \n",
       "1       3.49      303.63  \n",
       "2       1.87      108.46  \n",
       "3       1.87      153.34  \n",
       "4       2.18       82.84  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "East = sales.loc[sales['Region'] == 'East']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>City</th>\n",
       "      <th>Category</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>TotalPrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>33</td>\n",
       "      <td>1.77</td>\n",
       "      <td>58.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Crackers</td>\n",
       "      <td>Whole Wheat</td>\n",
       "      <td>87</td>\n",
       "      <td>3.49</td>\n",
       "      <td>303.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-10</td>\n",
       "      <td>East</td>\n",
       "      <td>New York</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>82</td>\n",
       "      <td>1.87</td>\n",
       "      <td>153.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Arrowroot</td>\n",
       "      <td>38</td>\n",
       "      <td>2.18</td>\n",
       "      <td>82.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2020-01-16</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>54</td>\n",
       "      <td>1.77</td>\n",
       "      <td>95.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>2021-12-09</td>\n",
       "      <td>East</td>\n",
       "      <td>New York</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>38</td>\n",
       "      <td>1.77</td>\n",
       "      <td>67.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>2021-12-12</td>\n",
       "      <td>East</td>\n",
       "      <td>New York</td>\n",
       "      <td>Crackers</td>\n",
       "      <td>Whole Wheat</td>\n",
       "      <td>25</td>\n",
       "      <td>3.49</td>\n",
       "      <td>87.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>2021-12-18</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Arrowroot</td>\n",
       "      <td>34</td>\n",
       "      <td>2.18</td>\n",
       "      <td>74.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>2021-12-21</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>245</td>\n",
       "      <td>1.87</td>\n",
       "      <td>458.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>2021-12-24</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Crackers</td>\n",
       "      <td>Whole Wheat</td>\n",
       "      <td>30</td>\n",
       "      <td>3.49</td>\n",
       "      <td>104.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OrderDate Region      City  Category         Product  Quantity  \\\n",
       "0   2020-01-01   East    Boston      Bars          Carrot        33   \n",
       "1   2020-01-04   East    Boston  Crackers     Whole Wheat        87   \n",
       "3   2020-01-10   East  New York   Cookies  Chocolate Chip        82   \n",
       "4   2020-01-13   East    Boston   Cookies       Arrowroot        38   \n",
       "5   2020-01-16   East    Boston      Bars          Carrot        54   \n",
       "..         ...    ...       ...       ...             ...       ...   \n",
       "236 2021-12-09   East  New York      Bars          Carrot        38   \n",
       "237 2021-12-12   East  New York  Crackers     Whole Wheat        25   \n",
       "239 2021-12-18   East    Boston   Cookies       Arrowroot        34   \n",
       "240 2021-12-21   East    Boston   Cookies  Chocolate Chip       245   \n",
       "241 2021-12-24   East    Boston  Crackers     Whole Wheat        30   \n",
       "\n",
       "     UnitPrice  TotalPrice  \n",
       "0         1.77       58.41  \n",
       "1         3.49      303.63  \n",
       "3         1.87      153.34  \n",
       "4         2.18       82.84  \n",
       "5         1.77       95.58  \n",
       "..         ...         ...  \n",
       "236       1.77       67.26  \n",
       "237       3.49       87.25  \n",
       "239       2.18       74.12  \n",
       "240       1.87      458.15  \n",
       "241       3.49      104.70  \n",
       "\n",
       "[150 rows x 8 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "East"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "West = sales.loc[sales['Region'] == 'West']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>City</th>\n",
       "      <th>Category</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>TotalPrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>58</td>\n",
       "      <td>1.87</td>\n",
       "      <td>108.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>51</td>\n",
       "      <td>1.77</td>\n",
       "      <td>90.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2020-02-09</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>44</td>\n",
       "      <td>1.77</td>\n",
       "      <td>77.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2020-02-24</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Bran</td>\n",
       "      <td>42</td>\n",
       "      <td>1.87</td>\n",
       "      <td>78.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2020-02-27</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Oatmeal Raisin</td>\n",
       "      <td>33</td>\n",
       "      <td>2.84</td>\n",
       "      <td>93.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>2021-12-03</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Bran</td>\n",
       "      <td>42</td>\n",
       "      <td>1.87</td>\n",
       "      <td>78.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>2021-12-06</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Oatmeal Raisin</td>\n",
       "      <td>100</td>\n",
       "      <td>2.84</td>\n",
       "      <td>284.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>2021-12-15</td>\n",
       "      <td>West</td>\n",
       "      <td>San Diego</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>96</td>\n",
       "      <td>1.87</td>\n",
       "      <td>179.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>2021-12-27</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Bran</td>\n",
       "      <td>30</td>\n",
       "      <td>1.87</td>\n",
       "      <td>56.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>2021-12-30</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Oatmeal Raisin</td>\n",
       "      <td>44</td>\n",
       "      <td>2.84</td>\n",
       "      <td>124.96</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>94 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OrderDate Region         City Category         Product  Quantity  \\\n",
       "2   2020-01-07   West  Los Angeles  Cookies  Chocolate Chip        58   \n",
       "7   2020-01-22   West  Los Angeles     Bars          Carrot        51   \n",
       "13  2020-02-09   West  Los Angeles     Bars          Carrot        44   \n",
       "18  2020-02-24   West  Los Angeles     Bars            Bran        42   \n",
       "19  2020-02-27   West  Los Angeles  Cookies  Oatmeal Raisin        33   \n",
       "..         ...    ...          ...      ...             ...       ...   \n",
       "234 2021-12-03   West  Los Angeles     Bars            Bran        42   \n",
       "235 2021-12-06   West  Los Angeles  Cookies  Oatmeal Raisin       100   \n",
       "238 2021-12-15   West    San Diego  Cookies  Chocolate Chip        96   \n",
       "242 2021-12-27   West  Los Angeles     Bars            Bran        30   \n",
       "243 2021-12-30   West  Los Angeles  Cookies  Oatmeal Raisin        44   \n",
       "\n",
       "     UnitPrice  TotalPrice  \n",
       "2         1.87      108.46  \n",
       "7         1.77       90.27  \n",
       "13        1.77       77.88  \n",
       "18        1.87       78.54  \n",
       "19        2.84       93.72  \n",
       "..         ...         ...  \n",
       "234       1.87       78.54  \n",
       "235       2.84      284.00  \n",
       "238       1.87      179.52  \n",
       "242       1.87       56.10  \n",
       "243       2.84      124.96  \n",
       "\n",
       "[94 rows x 8 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "West"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "sales['UnitPrice'] *= 1.15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2.0355\n",
       "1    4.0135\n",
       "2    2.1505\n",
       "3    2.1505\n",
       "4    2.5070\n",
       "Name: UnitPrice, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales['UnitPrice'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>City</th>\n",
       "      <th>Category</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>TotalPrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>33</td>\n",
       "      <td>2.0355</td>\n",
       "      <td>58.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Crackers</td>\n",
       "      <td>Whole Wheat</td>\n",
       "      <td>87</td>\n",
       "      <td>4.0135</td>\n",
       "      <td>303.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1505</td>\n",
       "      <td>108.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-10</td>\n",
       "      <td>East</td>\n",
       "      <td>New York</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>82</td>\n",
       "      <td>2.1505</td>\n",
       "      <td>153.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Arrowroot</td>\n",
       "      <td>38</td>\n",
       "      <td>2.5070</td>\n",
       "      <td>82.84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate Region         City  Category         Product  Quantity  \\\n",
       "0 2020-01-01   East       Boston      Bars          Carrot        33   \n",
       "1 2020-01-04   East       Boston  Crackers     Whole Wheat        87   \n",
       "2 2020-01-07   West  Los Angeles   Cookies  Chocolate Chip        58   \n",
       "3 2020-01-10   East     New York   Cookies  Chocolate Chip        82   \n",
       "4 2020-01-13   East       Boston   Cookies       Arrowroot        38   \n",
       "\n",
       "   UnitPrice  TotalPrice  \n",
       "0     2.0355       58.41  \n",
       "1     4.0135      303.63  \n",
       "2     2.1505      108.46  \n",
       "3     2.1505      153.34  \n",
       "4     2.5070       82.84  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "sales['TotalPrice'] = sales['Quantity'] * sales['UnitPrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     67.1715\n",
       "1    349.1745\n",
       "2    124.7290\n",
       "3    176.3410\n",
       "4     95.2660\n",
       "Name: TotalPrice, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales['TotalPrice'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>City</th>\n",
       "      <th>Category</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>TotalPrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>33</td>\n",
       "      <td>2.0355</td>\n",
       "      <td>67.1715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Crackers</td>\n",
       "      <td>Whole Wheat</td>\n",
       "      <td>87</td>\n",
       "      <td>4.0135</td>\n",
       "      <td>349.1745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1505</td>\n",
       "      <td>124.7290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-10</td>\n",
       "      <td>East</td>\n",
       "      <td>New York</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>82</td>\n",
       "      <td>2.1505</td>\n",
       "      <td>176.3410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Arrowroot</td>\n",
       "      <td>38</td>\n",
       "      <td>2.5070</td>\n",
       "      <td>95.2660</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate Region         City  Category         Product  Quantity  \\\n",
       "0 2020-01-01   East       Boston      Bars          Carrot        33   \n",
       "1 2020-01-04   East       Boston  Crackers     Whole Wheat        87   \n",
       "2 2020-01-07   West  Los Angeles   Cookies  Chocolate Chip        58   \n",
       "3 2020-01-10   East     New York   Cookies  Chocolate Chip        82   \n",
       "4 2020-01-13   East       Boston   Cookies       Arrowroot        38   \n",
       "\n",
       "   UnitPrice  TotalPrice  \n",
       "0     2.0355     67.1715  \n",
       "1     4.0135    349.1745  \n",
       "2     2.1505    124.7290  \n",
       "3     2.1505    176.3410  \n",
       "4     2.5070     95.2660  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3      176.3410\n",
       "8      203.5500\n",
       "9       43.4700\n",
       "14      46.8165\n",
       "15      41.9175\n",
       "         ...   \n",
       "223     48.3000\n",
       "228    366.0220\n",
       "229     73.1170\n",
       "236     77.3490\n",
       "237    100.3375\n",
       "Name: TotalPrice, Length: 62, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales.loc[sales['City'] == 'New York', 'TotalPrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20ab1b4bc88>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sales.plot(kind = 'scatter', x='City', y='TotalPrice') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20ab3bbc648>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sales.plot(kind = 'scatter', x='Category', y='TotalPrice') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38324.417"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales['TotalPrice'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15442"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales['Quantity'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 244 entries, 0 to 243\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype         \n",
      "---  ------      --------------  -----         \n",
      " 0   OrderDate   244 non-null    datetime64[ns]\n",
      " 1   Region      244 non-null    object        \n",
      " 2   City        244 non-null    object        \n",
      " 3   Category    244 non-null    object        \n",
      " 4   Product     244 non-null    object        \n",
      " 5   Quantity    244 non-null    int64         \n",
      " 6   UnitPrice   244 non-null    float64       \n",
      " 7   TotalPrice  244 non-null    float64       \n",
      "dtypes: datetime64[ns](1), float64(2), int64(1), object(4)\n",
      "memory usage: 15.4+ KB\n"
     ]
    }
   ],
   "source": [
    "sales.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20ab217ef08>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sales['Product'].value_counts().plot(kind='pie', figsize=(6,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>City</th>\n",
       "      <th>Category</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>TotalPrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Bars</td>\n",
       "      <td>Carrot</td>\n",
       "      <td>33</td>\n",
       "      <td>2.0355</td>\n",
       "      <td>67.1715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Crackers</td>\n",
       "      <td>Whole Wheat</td>\n",
       "      <td>87</td>\n",
       "      <td>4.0135</td>\n",
       "      <td>349.1745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>West</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1505</td>\n",
       "      <td>124.7290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-10</td>\n",
       "      <td>East</td>\n",
       "      <td>New York</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Chocolate Chip</td>\n",
       "      <td>82</td>\n",
       "      <td>2.1505</td>\n",
       "      <td>176.3410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>East</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Cookies</td>\n",
       "      <td>Arrowroot</td>\n",
       "      <td>38</td>\n",
       "      <td>2.5070</td>\n",
       "      <td>95.2660</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate Region         City  Category         Product  Quantity  \\\n",
       "0 2020-01-01   East       Boston      Bars          Carrot        33   \n",
       "1 2020-01-04   East       Boston  Crackers     Whole Wheat        87   \n",
       "2 2020-01-07   West  Los Angeles   Cookies  Chocolate Chip        58   \n",
       "3 2020-01-10   East     New York   Cookies  Chocolate Chip        82   \n",
       "4 2020-01-13   East       Boston   Cookies       Arrowroot        38   \n",
       "\n",
       "   UnitPrice  TotalPrice  \n",
       "0     2.0355     67.1715  \n",
       "1     4.0135    349.1745  \n",
       "2     2.1505    124.7290  \n",
       "3     2.1505    176.3410  \n",
       "4     2.5070     95.2660  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "Totalsales = sales.loc[sales['Product'] == 'Carrot', 'TotalPrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8522.6385"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Totalsales.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38324.417"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales['TotalPrice'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "Easternsales = sales.loc[sales['Region'] == 'East' , 'TotalPrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "East = Easternsales.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "Westernsales = sales.loc[sales['Region'] == 'West' , 'TotalPrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13571.402999999998"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Westernsales.sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20ab3f13088>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWIAAAFUCAYAAAAefzbKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3deZgcVb3/8fd3Vgghwy6LQKEsiqAoLiAQQEW9tjyKAv64KLiiCAKiYIEKBXKlvQoq4gbIJgIKLgilLAJJWCIJSNgii0ADEpUl0CRAEpKc3x/VuQRIJj0z3f2t6vq8nqefcSbJ5BPDfHLmnFPnWAgBERHx0+MdQESk7FTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs5UxCIizlTEIiLOVMQiIs76vAPI2JnZIuCOpT50YQihOsLPsQuwIIRwYyuziciKqYi7w/MhhG3G+Dl2AeYCKmKRDtPURBczs2PMbLqZ3Wlmp5mZNT5+iJnNNLPbzexCM4uALwBfNrMZZraTZ26RsrEQgncGGaNlTE2cGEL4tZmtEUKY3fg5vwR+E0K41MxmAZuEEOab2WohhKfNLAHmhhC+1/k/gUi5aWqiOyxvamJXMzsSGAesAdwFXArcDvzKzP4A/KFzMUVkWTQ10aXMbCXgJ8CeIYStgdOBlRo/XAF+DGwL3GJm+gdZxJGKuHstKd0nzGw8sCeAmfUAG4YQrgWOBFYDxgNzgFU9goqUnUZC3WFlM5ux1PuXhxBiMzudbO64Bkxv/FgvcJ6ZDQEGfL8xR3wpcLGZfQj4Ugjhug7mFyk1LdZJIURx2gOsB2wIrEk2kh9axmtVsn9sAMLL3gIsBJ4Bnn7Zq954+wTwz1q18mQb/zgiL6EiltyI4nQ14I3AZsDGwEaNtxsDrwb6OxjnOeCfwEPAg8ADjdfdwN9r1crCDmaRLqcilo6L4rQX2JysdN8IvKnxdkPPXCMwH5gJ3NZ4zQBuq1UrT7mmksJSEUvbRXG6CvBOYCKwM/BWYGXXUO3xMDAVmAxMqlUrf3fOIwWhIpaWi+J0ArAjWelOJNsm18lphbz4DzCFRjEDM2vVir7g5BVUxNISUZxuBHyo8doZ7chZlv8Al5E9RHNVrVqZ75xHckJFLKMWxek2ZMX7YWCshw6VzVzgcrJSTmvVytPOecSRilhGJIrTrYH9gL3IdjPI2L1ANn1xAfCbWrUy1zmPdJiKWFYoitO1gY8D+5PtcJD2eRa4CDirVq1M8Q4jnaEilmVqPEDxPuCzwO6Uc7HN2z+As4Gza9XKo85ZpI1UxPISjR0PnwUOQVMPebEY+DNwcq1aucY7jLSeiliA/9v1cChZCU9wjiPLdytwEvBrPd3XPVTEJRfF6duArwAfRVvOiuQR4BTgtFq18ox3GBkbFXFJRXG6M3A82QMXUlzPAD8H/rdWrTzhHUZGR0VcMlGcvhX4NrCbdxZpqTnAycBJtWpljncYGRkVcUlEcbolcAKwh3cWaasngBOBn9SqlXneYaQ5KuIuF8XpJsBxwL7oRpYy+SfZ1NNZWtTLPxVxl4ridBzwdbKFuEHnOOLnbuAgbXvLNxVxF4ridA/g+2gfsLzoQuArtWpllncQeSUVcReJ4nRTsi1N/+WdRXJpDnAs8CNNV+SLirgLRHG6MnA0cASahpAVu51suuJ67yCSUREXXBSn2wHnkt3zJtKsAJxBNl2h7W7OVMQFFcVpP5AAX+PFW4tFRuoh4NNazPOlIi6gKE63An6JDmOX1gjAj4EjtPfYh4q4QBpHU36VbH+o5oKl1WYC/12rVm7zDlI2KuKCiOJ0A7IbHHbyziJdbQFwdK1aOck7SJmoiAsgitNdyfaBruOdRUrj98D+WsjrDD3ymnNRnB4JXIVKWDprD2B6FKev9w5SBhoR51TjpoyzgI94Z5FSmwt8qlatXOwdpJupiHMoitM3AL8DNvfOItLwPSCuVSuLvIN0IxVxzkRxujvZotwq3llEXuZaYM9atTLbO0i30RxxjkRxeiDZIolKWPJoV+CGKE4j7yDdRiPiHIji1MgO8/6adxaRJvwb+ECtWrnVO0i3UBE7i+J0ADiT7OB2kaKYA3y0Vq1c5R2kG2hqwlEUp0PA5aiEpXhWBdIoTvfzDtINVMROojhdF7iebN5NpIj6gXOiOD3KO0jRqYgdNEr4WmAr7ywiLfDtKE6P8w5RZCriDovidD1gEvA65ygirXSMynj0VMQdFMXp+mQlvIVzFJF2UBmPkoq4QxolfC16Wk662zFRnCbeIYpGRdwBjSMsJ6ESlnI4VmU8MtpH3GZRnK5JtjtCc8JSNl+vVSvf9g5RBCriNoridBXgGuDt3llEnHyyVq2c4x0i71TEbdK43PNS4H3eWUQcvQB8sFatXOkdJM80R9w+p6MSFukHLo7i9M3eQfJMRdwGjYWK/b1ziOTEksehN/YOkleammixKE73B872ziGSQ38HdqhVK095B8kbFXELRXG6HTAZGPDOIpJTk4DdatXKQu8geaKpiRaJ4vRVwMWohEWGswtQ9Q6RNxoRt0AUp33A1cBE7ywiBbF3rVq5yDtEXmhE3BrfRSUsMhJnRnH6eu8QeaER8RhFcboPcL53DpECugd4W61ameMdxJtGxGMQxenWwBneOUQKagu0wwhQEY9aFKfjgIuAcd5ZRArsI1GcHu4dwpuKePS+i84VFmmFb0dxWurbajRHPApRnL6P7NJPEWmNGcA7atXKAu8gHjQiHqEoTtcAzvTOIdJltgES7xBeVMQj91Ngfe8QIl3oyChO3+kdwoOmJkYgitN9gfO8c4h0sfuBN9WqlWe9g3SSRsRNalx3dKp3DpEu91rgJO8QnaYibt4PgNW8Q4iUwOejON3JO0QnaWqiCVGcvhe4wjuHSIncAbylLKe0aUS8AlGcDqIpCZFO2xr4kneITlERr9iRwGbeIURK6LgoTtfzDtEJKuJhRHH6GuBo7xwiJbUqJVm4UxEP7xRgJe8QIiW2TxSn7/IO0W5arFuOKE4rwGXeOUSEvwNv7OaFO42IlyGK0x7gRO8cIgLA64HPeodoJxXxsu1DtmorIvlwbBSnq3iHaBcV8ctEcdoPHO+dQ0ReYl3gMO8Q7aIifqXPAa/xDiEir3BkFKere4doBxXxUhq3bnzTO4eILNME4KveIdpBRfxSh5J9CyQi+XRIFKdreYdoNRVxQxSn44EjvHOIyLC68utURfyizwJdOf8k0mW+EMXpBO8QraQiBqI47aWLV2RFuswEskX1rqEizuwFbOwdQkSadmgUp33eIVpFRZzpypVYkS62IdkAqiuUvoijON0F2NY7h4iM2Fe8A7RK6YsYjYZFimrbKE539g7RCqUu4ihONwc+4J1DREatK0bFpS5i4DOAeYcQkVGrRHG6oXeIsSptETdWXPfzziEiY9JDF3wdl7aIgf9CjzOLdINPegcYqzIX8ae9A4hIS2waxemO3iHGopRFHMXpOkDFO4eItMynvAOMRSmLGPgE0O8dQkRaZu8i3+BR1iIu9L+eIvIK44E9vUOMVumKOIrTLYE3eOcQkZb7uHeA0SpdEQMf9g4gIm2xcxSnq3mHGI0yFvEe3gFEpC36KegifKmKuPEEzlu9c4hI2xTyO95SFTEF/UsSkaa9P4rTQe8QI6UiFpFuMh54t3eIkSpNEUdxugYw0TuHiLRd4QZcpSlisrMluuZqFRFZrt2jOC3UqYplKuLCfbsiIqOyLgV7VkBFLCLdqFA3d5SiiKM43RTYyDuHiHSMijiHdvEOICIdVaiF+bIU8U7eAUSko14VxenrvEM0S0UsIt2qMKPiri/iKE43ADbxziEiHVeYeeKuL2LgHd4BRMRFYa5PKkMRv8k7gIi42CiK09W9QzSjDEW8jXcAEXFTiIFYGYq4EH8RItIWhfj67+oibpzWv7F3DhFxoyLOAU1LiJSbijgHCvGXICJt84YoTnN/6qKKWES62SCwhXeIFen2It7UO4CIuMv9o87dXsSRdwARcZf7BfuuLeIoTvuB9b1ziIg7FbGjDYFe7xAi4k5F7CjyDiAiuaAidhR5BxCRXIi8A6xIU0VsZpub2elmdqWZXbPk1e5wYxR5BxCRXFgtitMJ3iGG0+xG54uAnwGnA4vaF6elNvQOICK5sTFwh3eI5Wm2iBeGEH7a1iStt6Z3ABHJjXW8Awyn2TniS83si2a2npmtseTV1mRjt5p3ABHJjSHvAMNpdkS8f+PtEUt9LACvaW2clirEgdAi0hG5Hpg1VcQhhCLe+Zbr/+NFpKOKPyI2s37gQF68FXUS8PMQwgttytUKKmIRWSLXfdDs1MRPgX7gJ433P9H42GfbEWqsGsfejffOISK5UfwRMfC2EMLSR0peY2a3tSNQi+T6Xz8R6bhcd0KzuyYWmdlrl7xjZq8h3/uJV/UOICK50hUj4iOAa83sAcDINkd/qm2pxq6bH90WkZEb8A4wnGZ3TVxtZpuRnXRvwN0hhPltTTY25h1ARHIl1ycxDlvEZvauEMI1ZvaRl/3Qa82MEMLv2phtLFTEIrK0XH+XvKIR8c7ANcDuy/ixAOS1iEUAeHfPLTNWYV6e1zOkAxbSNwsq3jGWa9giDiEc23ib5/ngZdGIuOR6WLzotwPH3vDmnvsnrvhnSwk8Bcd7Z1iuZh/oOHwZH64Dt4QQZrQ2UkuoiEtsHPOevXrwqzPXs9kqYVlioXeA4TQ7b/JW4AvABo3XAcAuwOlmdmR7oo2Jirik1uGpx6cNfvGh9Wz227yzSK7kenqq2SJeE3hLCOErIYSvkBXz2mSPPH+yTdnGIs+PXkubbGEPP3jD4CHzxtu8Lb2zSO50RRFvBCxY6v0XgI1DCM8DedzGNsc7gHTWLj0zbv/zQLxavy3ShQCyLLmemmj2gY7zgb+a2SWN93cHLjCzVYCZbUk2NnXvANI5+/VeMfW4vnPebMZK3lkkt572DjAcCyE09xPNtgV2JJt/vT6EcHM7g41VFKfzgEHvHNJeJ/T9YvK+vVdPNNO6gAzruyT1PK5nAc2PiAFWBp4JIZxlZmub2SYhhAfbFawFniGbx5YuZCxefH7//1y3fe/fd/bOIoXwhHeA4TS7fe1YsgW6LYCzyI7EPA/YoX3RxqyOirgrrcT8eVcOfG3GRj2PqYSlWU96BxhOsyPiPYA3A38DCCHMMrO8n3CmeeIutDrPzJ48ePijE+y57byzSKHkuoib3TWxIGSTyQGgsUiXd894B5DW2sRmPXzT4MH1Cfbc1t5ZpHByPTXRbBH/xsx+DqxmZp8D/gKc0b5YLfGYdwBpne167rrr6oEjVh6whUW8P1H85XpE3OwxmN8zs93IRplbAMeEEK5qa7Kxe8Q7gLTG3r3XTvtO3+lbmTHOO4sUVq5HxE3vmmgU71UAZtZrZvuGEH7VtmRj97B3ABm7o/vOm/K53j/tYJbv82Ql1wIw2zvEcIadmjCzCWZ2lJmdambvtczBwAPA3p2JOGoPeQeQsQjhrP7vTD6g708TVcIyRrNJ6rl+xHlFI+JfAk8BU8lubD6C7MqRD+X01LWlaURcUP0sXPDngfjmTXtmaXuatMI/vAOsyIqK+DUhhK0BzOwMsnmWjUIIRTjLQUVcQBOYW588ePiDq9vcd3pnka5xj3eAFVnRron/O8UshLAIeLAgJUytWpkNzPXOIc3b0B57dNrgQU+sbnO38c4iXSX3RbyiEfGbzGzJflwDVm68b0AIIUxoa7qxexjQkYgF8Ba79+6LBo5bvdfCa72zSNe52zvAiqzoqqSiL5Lcg4o493bvufHmU/pPfZ0Z472zSFfK/Yg41zebtsDt3gFkeIf1XXzdKf2nbqMSljZZTBcs1hWdijjHftL/g8kf6J2mnRHSTjWSeh4vr3gJFbF0XB8LX/jjwDdu2rLnYZWwtFvupyWg+4v4fuBZoAiHFJXCKjw/Z9Lg4feubfUdvbNIKeR+oQ66fI64Vq0E4E7vHJJZjyf/PX3wwFlrW31b7yxSGoX4+u/qIm7Q9EQObG0P3Hfd4KGLx9mCLbyzSKnc6B2gGWUo4tu8A5Tde3um3/rHgW+s02eL1/fOIqXyJJojzo2/egcos8/3XnpD3HfB28wY8M4ipXMjSb2525GdlaGIZ5A96qx9qh12Uv9PJ3+k5zrdsCxervcO0Kyun5qoVSuLgJu8c5RJD4sX/W7gmCkf7b1uZ5WwOLrBO0Czur6IG67zDlAW45j37PWDh9zylp5/TPTOIqU2H7jZO0SzyjA1ATDJO0AZrMXTj08aPPzx8Tbv7d5ZpPRuKcITdUuUZUT8V2Ced4hutrk98uDUwS89P97m6ZAlyYPCTEtASYq4Vq3MpyD7CYtoYs9tt18+EA/126KNvLOINKiIc+ov3gG60X69V0w9p/87m/dYWMM7i0jDAuAa7xAjUaYi/qN3gG7zrb4zJx/Xd847zFjJO4vIUq4hqRfiJqElSlPEtWrlLrJDgGSMjMWLL+g/Ycon+v6ys1l5/huSwviDd4CRKtsXkUbFYzTIgnmTBw6ftn3vTG1PkzwKFPDrvGxFfIl3gCJbnWdmTxv84n0b9Ty2nXcWkeWYRlL/l3eIkSpbEV9PdhCIjNAmNuvhmwYPrg/Zc1t7ZxEZRuGmJaBkRdx43Dn1zlE077CZM68eOGLlAVu4iXcWkRVQEReEpidGYK/eSdMuHDgh6rGwtncWkRW4h6ReiBs5Xq4sjzgv7U9AHRjyDpJ3R/X9asoBvekOZvR6ZxFpQiFHw1DCEXGtWpkH/No7R76FcGb//07+fF86USUsBfIb7wCjVboibjjbO0Be9bNwwVUDR9z4rt4ZumFZiuRvJPW/eYcYrVIWca1amUpBrlDppAnMrd80eNDMzXpm7eCdRWSETvcOMBalLOKGc7wD5MmG9tij0wYPenwNm7ONdxaREXoW+JV3iLEocxGfCyz2DpEHb7b77pk08OXeleyFTb2ziIzCr4t2tsTLlbaIa9XKo8BV3jm8fbBn6i2/Gzh2/V4L63pnERml07wDjFVpi7ih8H+BY3Fo72+v/1H/j95kxqreWURG6XaSeuHvpCzjPuKlXQI8CJTuibEf9/9wcqX3Ju2MkKIr9CLdEqUeETceef6hd45O6mXRwnTgqOtVwtIFngfO8w7RCqUu4oZfkD1p1/VW4fk5UwcPvu0NPQ/t6J1FpAUuIKk/7R2iFUpfxLVqZS5d8u3NcNbjyX9PH/zirHWsvq13FpEWWARUvUO0SumLuOEUYKF3iHbZ0mr3Xzd46KJxNn8L7ywiLfJrkvp93iFaRUUM1KqVR4CLvXO0w249N89IB45eq88Wb+CdRaRFAvA/3iFaSUX8ou96B2i1A3ovu+G0/pO3NNNJc9JVfktSn+kdopVUxA21auVvwO+9c7TK9/p/NumovvPfacaAdxaRFgrACd4hWk1F/FLfpOCPPfeweNFvB46dsmfvlF3MMO88Ii12GUn9Nu8QraYiXkqtWrkLuMA7x2itzPznrhs89JZte+7TDcvSrb7lHaAdVMSvdCwF3EGxFk8/Pn3wwNoG9uTbvbOItMkVJPXp3iHaQUX8MrVq5X7gTO8cI7G5PfLg1MEvPT/e5m3pnUWkTQJwjHeIdlERL9u3gPneIZqxU8/td1w+EA/126KNvLOItNG5JPVp3iHaRUW8DLVq5Z/Aj7xzrMgneq/867n91c16LKzhnUWkjeYAsXeIdlIRL9/xwL+8QyzP8X1nTT6+7+y3m7GSdxaRNvsWSf3f3iHaSUW8HLVqZQ7wVe8crxTC+f0nTN6v76qdzfT3J13vXuAH3iHazUII3hlyLYrTSUAujowcZMG8Kwa+dmvU85/tvbOIdMgHSOp/9g7RbhpRrdhB5GA72+o8M3va4BfvVQlLiaRlKGFQEa9Q4yEP14W7yP71yE2DB9eH7Lk3euYQ6aAFwGHeITpFRdycBKeFu3fYzJnXDHx1pQFbWLrrnKTUvk9S/4d3iE5RETehVq08A3yp07/vnr2Tp104cELUY2HtTv/eIo7uA47zDtFJWqwbgShOzwP27cTvFfedP+XzvZftYEZvJ34/kZxYDOxEUr/RO0gnlf0W55E6GNgFaOMh6yH8ov97U97de2sudmqIdNjJZSth0NTEiNSqlaeBT7fr8/ezcMGVA0feqBKWkvo72VG0paMiHqFatXIl8NNWf95Vebb+18GD7tq859EdWv25RQrgBeDjJPV53kE8qIhH5wigZSu6r7bHZ00f/OLja9qcN7fqc4oUzDdJ6n/zDuFFRTwKtWrlWWA/WvCgxzb2j3smDxzWs5K9sOnYk4kU0rV04Z2RI6EiHqVatTIVOGosn+ODPVNv+f3AMev3Wli3RbFEiuYpYD+SeqGvKBsrbV8boyhOLwY+OtJfd0jv767/ct/F25lp54qU1mJgd5L6n7yDeFMJjN2ngK2ALZr9Baf2/3DSB3tv2qVtiUSK4esq4YxGxC0QxemWwDRgleF+Xi+LFl4y8M2pW/XUdupMMpHcupCkvo93iLzQHHEL1KqVmcDnhvs5q/D8nKmDX5qhEhZhBvAZ7xB5ohFxC0VxegrLOJNiXWb/55rBrzw9zuY3PX0h0qUeB95GUn/IO0ieaETcWocDVyz9gS2tdv/1g4csVAmLsBDYSyX8SiriFqpVKwuBvYE7AHbruXlGOnD0Wn22uI1nU4gUxmEk9cneIfJIUxNtEMXphgf0Xvazo/rOf48ZA955RHLgNJL6571D5JWKuF2SoTcBU4AJ3lFEnF0M/D+S+iLvIHmlqYl2Seq3AR8G5ntHEXF0ObCvSnh4KuJ2SurXAp8ge4JIpGymAB8hqS/wDpJ3KuJ2S+oXkR0oL1ImN5M9vvy8d5Ai0BxxpyRDBwI/Bsw7ikib3QXsTFJ/0jtIUaiIOykZ+gxwGvpORLrX/WR3zrncel5UKuJOS4b2A84EXQoqXeefZCVc8w5SNBqZdVpSP5dsAW/Mh8qL5Mg9wI4q4dFREXtI6hcA+5Dd0yVSdNPJSliPLo+SithLUr8Y2AvQ1h4psquAd5HUn/AOUmQqYk9J/RLgQ8Bc7ygio3AhUCGp67/fMVIRe0vqlwM7AA97RxEZgVOA/yapa3qtBbRrIi+SoVcBvwe2944isgJfJ6l/2ztEN9GIOC+S+n+AXYHzvaOILMd84DMq4dbTiDiPkqFvAMejp/AkPx4G9iSpT/cO0o1UxHmVDO0JnAOM844ipfcXYB/tjGgfTU3kVba9bSLwqHcUKa0AnAi8XyXcXhoR510ytCZwBtnZxiKdUgf2b2yxlDZTERdFMvQF4GRgZe8o0vXuJDtH+D7vIGWhqYmiSOo/A7YFbvOOIl3tbOAdKuHO0oi4aJKhQaAKHIp2VUjrzAI+T1K/zDtIGamIiyoZej/Z6OVVzkmk+M4FDiWpP+0dpKxUxEWWDK0D/AzYwzuKFJJGwTmhIu4GyVAF+BGwiXcUKYxzgMM0Cs4HFXG3SIZWBo4GjgQGnNNIfs0CDiCpp95B5EUq4m6TDG0OnArs5h1FcmUe8H3gRJL6HO8w8lIq4m6VDH2MbN/x+t5RxFUgOzc4JqnrqNWcUhF3s2RoVSABDgIGfcOIgxuBw0nqN3kHkeGpiMsgGXo18HXgM0C/cxppvwfJRsC/8Q4izVERl0kytDHwTWB/oM85jbTe02SH9PyQpD7fO4w0T0VcRsnQa4FjgH2BXuc0MnaPki3E/Vz3xxWTirjMkqEtgGOBj6FzR4robuC7wHkkdd0GXmAqYllSyAeRTVlMcE4jK3YT2Xkjl5DU9QXcBVTE8qJkaDzwcbJS3so5jbzS5UCVpD7ZO4i0lopYli0Z2pmskPdAC3ueHiN7HPkMkvq93mGkPVTEMrxkaH3ggMZrPec0ZbEIuIrsZpY/ktRfcM4jbaYiluYkQz1kd+jtBXwUHb/ZDjOAXwIXkNT/5R1GOkdFLCOXlfJOvFjK6/oGKrQ7gMuA80nqd3qHER8qYhmbrJR35MVS1vTF8J4DrgZS4E8k9Uec80gOqIildbJS3gZ4D/BuslGzLjuFB1hSvDCJpD7POY/kjIpY2ie7X297srnlHRv/e7xrpvZbDNwFTGu8ppDU7/aNJHmnIpbOSYZ6yUbM7wTeSLZX+Q3Aqp6xxuhhXizdacAtesxYRkpFLP6SoY14sZSXvH09MM4z1lLmk51o9kDjdT9wH1np/tszmHQHFbHkUzbf/Gqyxb91ybbLrbuM16sYXWG/ANSX83qEFwv3AeBRPUos7aQiluJLhvrJzlnuW+pt3zI+Nh94BqiT1J/3CTt6ZvZ94KEQwg8a718BPBJC+Gzj/ZOAR0MIJ4/gcx4GnBZCeK4dmaU5KmKRgjCzvYC9Qgh7m1kPMB1YEELYvvHjU4HDQghN38hhZjXgrSGEJ9qRWZqjow9FiuMGsoVOyObR7wTmmNnqZjZINq9+q5kdYWbTzex2MzsOwMxWMbPUzG4zszvN7GNmdgjZnYbXmtm1Hn8gyegwF5GCCCHMMrOFZrYRWSFPBTYg2xZYB24HdgE2A94OGPBHM5sIrA3MCiFUAMxsKIRQN7PDgV01IvalEbFIsSwZFS8p4qlLvX8j8N7G61bgb8DryIr5DuA9ZvYdM9sphFB3yC7LoSIWKZYbyUp3a7Kpib+SjYjfSVbSBpwYQtim8do0hPCLEMK9wLZkhXyimR3jE1+WRUUsUiw3AB8EZocQFoUQZgOrkZXxVOAK4NNmNh7AzDYws3XMbH3guRDCecD3gLc0Pt8civ1ATVfQHLFIsdwBrAWc/7KPjW/M815pZq8HppoZwFyyW1c2Bb5rZovJ9lAf2Pi1pwF/NrN/hRB27dCfQV5G29dERJxpakJExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZiigVcjMAAABVSURBVFhExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZilhExJmKWETEmYpYRMSZilhExNn/B0mfWY16gsGSAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sales['Region'].value_counts().plot(kind = 'pie',x = 'East', figsize = (6,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20ab3f10a08>"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sales.plot(kind = 'scatter', x='Category', y='TotalPrice') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
